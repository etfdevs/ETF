add_library(qagame MODULE
	"../api/shared/q_bit.c"
	"../api/shared/q_bit.h"
	"../api/shared/q_color.c"
	"../api/shared/q_color.h"
	"../api/shared/q_math.c"
	"../api/shared/q_math.h"
	"../api/shared/q_path.c"
	"../api/shared/q_path.h"
	"../api/shared/q_platform.h"
	"../api/shared/q_rand.c"
	"../api/shared/q_rand.h"
	"../api/shared/q_string.c"
	"../api/shared/q_string.h"
	"../api/et/q_shared.c"
	"../api/et/q_shared.h"
	"bg_events.h"
	"bg_mod.h"
	"bg_local.h"
	"bg_misc.c"
	"bg_public.h"
	"bg_pmove.c"
	"bg_q3f_controllable.c"
	"bg_q3f_controllable.h"
	"bg_q3f_flyby.c"
	"bg_q3f_flyby.h"
	"bg_q3f_grenades.c"
	"bg_q3f_grenades.h"
	"bg_q3f_playerclass.c"
	"bg_q3f_playerclass.h"
	"bg_q3f_splines.c"
	"bg_q3f_splines.h"
	"bg_q3f_util.c"
	"bg_q3f_util.h"
	"bg_q3f_weapon.c"
	"bg_q3f_weapon.h"
	"bg_slidemove.c"
	"bg_tracemap.c"
	"g_active.c"
	"g_client.c"
	"g_cmds.c"
	"g_combat.c"
	"g_cvar.h"
	"g_items.c"
	"g_main.c"
	"g_local.h"
	"g_mem.c"
	"g_misc.c"
	"g_missile.c"
	"g_mover.c"
	"../api/et/g_public.h"
	"g_q3f_admin.c"
	"g_q3f_admin.h"
	"g_q3f_charge.c"
	"g_q3f_charge.h"
	"g_q3f_controllable.c"
	"g_q3f_crc.c"
	"g_q3f_engineer.c"
	"g_q3f_flag.c"
	"g_q3f_flag.h"
	"g_q3f_grenades.c"
	"g_q3f_grenades.h"
	"g_q3f_mapdata.c"
	"g_q3f_mapdata.h"
	"g_q3f_mapents.c"
	"g_q3f_mapents.h"
	"g_q3f_mapinfo.c"
	"g_q3f_mapselect.c"
	"g_q3f_mapselect.h"
	"g_q3f_mapsentry.c"
	"g_q3f_panel.c"
	"g_q3f_playerclass.c"
	"g_q3f_playerclass.h"
	"g_q3f_ready.c"
	"g_q3f_scanner.c"
	"g_q3f_serverconfig.c"
	"g_q3f_soundscript.c"
	"g_q3f_specents.c"
	"g_q3f_string.c"
	"g_q3f_team.c"
	"g_q3f_team.h"
	"g_q3f_waypoint.c"
	"g_q3f_weapon.c"
	"g_q3f_weapon.h"
	"g_session.c"
	"g_spawn.c"
	"g_stats.c"
	"g_svcmds.c"
	"../api/et/g_syscalls.c"
	"g_target.c"
	"g_team.c"
	"g_trigger.c"
	"g_unlagged.c"
	"g_utils.c"
	"g_weapon.c"
	"g_weapon.h"
)

if(USE_BOTS)
	target_sources(qagame PRIVATE g_bot_interface.cpp g_bot_interface.h ../Omnibot/Common/BotLoadLibrary.cpp)
	target_compile_definitions(qagame PRIVATE BUILD_BOTS)
endif()


target_compile_definitions(qagame PRIVATE QAGAME GAMEDLL API_ET NO_BOT_SUPPORT)
target_link_libraries(qagame PRIVATE cxx_compiler_opts cJSON)
set_target_properties(qagame PROPERTIES
	LIBRARY_OUTPUT_DIRECTORY "${BASE_DIR_PATH}"
	LIBRARY_OUTPUT_DIRECTORY_DEBUG "${BASE_DIR_PATH}"
	LIBRARY_OUTPUT_DIRECTORY_RELEASE "${BASE_DIR_PATH}")
set_target_platform_details(qagame)
